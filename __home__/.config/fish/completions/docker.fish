function __fish_docker_command_chain_satisfies
    set -l cmd (commandline -poc)
    if test (count $cmd) -lt (count $argv)
        return 1
    end
    for i in (seq (count $argv))
        if test $cmd[$i] != $argv[$i]
            return 1
        end
    end
    return 0
end
function __fish_docker_command_chain_exactly_matches
    if not __fish_docker_command_chain_satisfies $argv
        return 1
    end
    set -l cmd (commandline -poc)
    if test (count $cmd) -eq (count $argv)
        return 0
    end
    string match -q -r '^--?\w+' -- $cmd[(math 1 + (count $argv))]
end
complete -c docker -f
complete -c docker -l help -d 'Print usage'
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -a build -d "Build an image from a Dockerfile"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -a login -d "Log in to a Docker registry"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -a logout -d "Log out from a Docker registry"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -a run -d "Run a command in a new container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -a search -d "Search the Docker Hub for images"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -a version -d "Show the Docker version information"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -a builder -d "Manage builds"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -a config -d "Manage Docker configs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -a container -d "Manage containers"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -a context -d "Manage contexts"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -a image -d "Manage images"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -a network -d "Manage networks"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -a node -d "Manage Swarm nodes"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -a plugin -d "Manage plugins"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -a secret -d "Manage Docker secrets"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -a service -d "Manage services"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -a stack -d "Manage Docker stacks"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -a swarm -d "Manage Swarm"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -a system -d "Manage Docker"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -a trust -d "Manage trust on Docker images"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -a volume -d "Manage volumes"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -l config -d "Location of client config files (default \"$HOME/.docker\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -s c -l context -d "Name of the context to use to connect to the daemon (overrides DOCKER_HOST env var and default context set with \"docker context use\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -s D -l debug -d "Enable debug mode"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -s H -l host -d "Daemon socket(s) to connect to"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -s l -l log-level -d "Set the logging level (\"debug\"|\"info\"|\"warn\"|\"error\"|\"fatal\") (default \"info\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -l tls -d "Use TLS; implied by --tlsverify"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -l tlscacert -d "Trust certs signed only by this CA (default \"$HOME/.docker/ca.pem\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -l tlscert -d "Path to TLS certificate file (default \"$HOME/.docker/cert.pem\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -l tlskey -d "Path to TLS key file (default \"$HOME/.docker/key.pem\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -l tlsverify -d "Use TLS and verify the remote"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker' -s v -l version -d "Print version information and quit"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l add-host -d "Add a custom host-to-IP mapping (host:ip)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l build-arg -d "Set build-time variables"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l cache-from -d "Images to consider as cache sources"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l cgroup-parent -d "Optional parent cgroup for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l compress -d "Compress the build context using gzip"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l cpu-period -d "Limit the CPU CFS (Completely Fair Scheduler) period"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l cpu-quota -d "Limit the CPU CFS (Completely Fair Scheduler) quota"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -s c -l cpu-shares -d "CPU shares (relative weight)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l cpuset-cpus -d "CPUs in which to allow execution (0-3, 0,1)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l cpuset-mems -d "MEMs in which to allow execution (0-3, 0,1)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l disable-content-trust -d "Skip image verification (default true)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -s f -l file -d "Name of the Dockerfile (Default is 'PATH/Dockerfile')"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l force-rm -d "Always remove intermediate containers"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l iidfile -d "Write the image ID to the file"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l isolation -d "Container isolation technology"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l label -d "Set metadata for an image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -s m -l memory -d "Memory limit"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l memory-swap -d "Swap limit equal to memory plus swap: '-1' to enable unlimited swap"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l network -d "Set the networking mode for the RUN instructions during build (default \"default\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l no-cache -d "Do not use cache when building the image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -s o -l output -d "Output destination (format: type=local,dest=path)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l platform -d "Set platform if server is multi-platform capable"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l progress -d "Set type of progress output (auto, plain, tty). Use plain to show container output (default \"auto\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l pull -d "Always attempt to pull a newer version of the image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -s q -l quiet -d "Suppress the build output and print image ID on success"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l rm -d "Remove intermediate containers after a successful build (default true)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l secret -d "Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l security-opt -d "Security options"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l shm-size -d "Size of /dev/shm"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l squash -d "Squash newly built layers into a single new layer"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l ssh -d "SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|<id>[=<socket>|<key>[,<key>]])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l stream -d "Stream attaches to server to negotiate build context"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -s t -l tag -d "Name and optionally a tag in the 'name:tag' format"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l target -d "Set the target build stage to build."
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker build' -l ulimit -d "Ulimit options (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker login' -a azure -d "Log in to azure"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker logout' -a azure -d "Logout from Azure"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -a "(docker image ls --format='{{.Repository}}:{{.Tag}}')" -d "Image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l add-host -d "Add a custom host-to-IP mapping (host:ip)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -s a -l attach -d "Attach to STDIN, STDOUT or STDERR"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l blkio-weight -d "Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l blkio-weight-device -d "Block IO weight (relative device weight) (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l cap-add -d "Add Linux capabilities"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l cap-drop -d "Drop Linux capabilities"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l cgroup-parent -d "Optional parent cgroup for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l cidfile -d "Write the container ID to the file"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l cpu-period -d "Limit CPU CFS (Completely Fair Scheduler) period"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l cpu-quota -d "Limit CPU CFS (Completely Fair Scheduler) quota"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l cpu-rt-period -d "Limit CPU real-time period in microseconds"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l cpu-rt-runtime -d "Limit CPU real-time runtime in microseconds"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -s c -l cpu-shares -d "CPU shares (relative weight)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l cpus -d "Number of CPUs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l cpuset-cpus -d "CPUs in which to allow execution (0-3, 0,1)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l cpuset-mems -d "MEMs in which to allow execution (0-3, 0,1)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -s d -l detach -d "Run container in background and print container ID"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l detach-keys -d "Override the key sequence for detaching a container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l device -d "Add a host device to the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l device-cgroup-rule -d "Add a rule to the cgroup allowed devices list"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l device-read-bps -d "Limit read rate (bytes per second) from a device (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l device-read-iops -d "Limit read rate (IO per second) from a device (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l device-write-bps -d "Limit write rate (bytes per second) to a device (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l device-write-iops -d "Limit write rate (IO per second) to a device (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l disable-content-trust -d "Skip image verification (default true)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l dns -d "Set custom DNS servers"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l dns-option -d "Set DNS options"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l dns-search -d "Set custom DNS search domains"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l domainname -d "Container NIS domain name"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l entrypoint -d "Overwrite the default ENTRYPOINT of the image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -s e -l env -d "Set environment variables"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l env-file -d "Read in a file of environment variables"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l expose -d "Expose a port or a range of ports"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l gpus -d "GPU devices to add to the container ('all' to pass all GPUs)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l group-add -d "Add additional groups to join"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l health-cmd -d "Command to run to check health"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l health-interval -d "Time between running the check (ms|s|m|h) (default 0s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l health-retries -d "Consecutive failures needed to report unhealthy"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l health-start-period -d "Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l health-timeout -d "Maximum time to allow one check to run (ms|s|m|h) (default 0s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l help -d "Print usage"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -s h -l hostname -d "Container host name"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l init -d "Run an init inside the container that forwards signals and reaps processes"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -s i -l interactive -d "Keep STDIN open even if not attached"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l ip -d "IPv4 address (e.g., 172.30.100.104)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l ip6 -d "IPv6 address (e.g., 2001:db8::33)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l ipc -d "IPC mode to use"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l isolation -d "Container isolation technology"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l kernel-memory -d "Kernel memory limit"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -s l -l label -d "Set meta data on a container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l label-file -d "Read in a line delimited file of labels"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l link -d "Add link to another container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l link-local-ip -d "Container IPv4/IPv6 link-local addresses"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l log-driver -d "Logging driver for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l log-opt -d "Log driver options"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l mac-address -d "Container MAC address (e.g., 92:d0:c6:0a:29:33)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -s m -l memory -d "Memory limit"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l memory-reservation -d "Memory soft limit"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l memory-swap -d "Swap limit equal to memory plus swap: '-1' to enable unlimited swap"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l memory-swappiness -d "Tune container memory swappiness (0 to 100) (default -1)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l mount -d "Attach a filesystem mount to the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l name -d "Assign a name to the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l network -d "Connect a container to a network"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l network-alias -d "Add network-scoped alias for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l no-healthcheck -d "Disable any container-specified HEALTHCHECK"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l oom-kill-disable -d "Disable OOM Killer"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l oom-score-adj -d "Tune host's OOM preferences (-1000 to 1000)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l pid -d "PID namespace to use"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l pids-limit -d "Tune container pids limit (set -1 for unlimited)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l platform -d "Set platform if server is multi-platform capable"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l privileged -d "Give extended privileges to this container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -s p -l publish -d "Publish a container's port(s) to the host"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -s P -l publish-all -d "Publish all exposed ports to random ports"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l read-only -d "Mount the container's root filesystem as read only"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l restart -d "Restart policy to apply when a container exits (default \"no\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l rm -d "Automatically remove the container when it exits"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l runtime -d "Runtime to use for this container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l security-opt -d "Security Options"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l shm-size -d "Size of /dev/shm"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l sig-proxy -d "Proxy received signals to the process (default true)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l stop-signal -d "Signal to stop a container (default \"SIGTERM\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l stop-timeout -d "Timeout (in seconds) to stop a container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l storage-opt -d "Storage driver options for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l sysctl -d "Sysctl options (default map[])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l tmpfs -d "Mount a tmpfs directory"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -s t -l tty -d "Allocate a pseudo-TTY"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l ulimit -d "Ulimit options (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -s u -l user -d "Username or UID (format: <name|uid>[:<group|gid>])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l userns -d "User namespace to use"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l uts -d "UTS namespace to use"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -s v -l volume -d "Bind mount a volume"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l volume-driver -d "Optional volume driver for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -l volumes-from -d "Mount volumes from the specified container(s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker run' -s w -l workdir -d "Working directory inside the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker search' -s f -l filter -d "Filter output based on conditions provided"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker search' -l format -d "Pretty-print search using a Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker search' -l limit -d "Max number of search results (default 25)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker search' -l no-trunc -d "Don't truncate output"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder' -a build -d "Build an image from a Dockerfile"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder' -a prune -d "Remove build cache"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l add-host -d "Add a custom host-to-IP mapping (host:ip)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l build-arg -d "Set build-time variables"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l cache-from -d "Images to consider as cache sources"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l cgroup-parent -d "Optional parent cgroup for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l compress -d "Compress the build context using gzip"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l cpu-period -d "Limit the CPU CFS (Completely Fair Scheduler) period"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l cpu-quota -d "Limit the CPU CFS (Completely Fair Scheduler) quota"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -s c -l cpu-shares -d "CPU shares (relative weight)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l cpuset-cpus -d "CPUs in which to allow execution (0-3, 0,1)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l cpuset-mems -d "MEMs in which to allow execution (0-3, 0,1)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l disable-content-trust -d "Skip image verification (default true)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -s f -l file -d "Name of the Dockerfile (Default is 'PATH/Dockerfile')"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l force-rm -d "Always remove intermediate containers"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l iidfile -d "Write the image ID to the file"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l isolation -d "Container isolation technology"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l label -d "Set metadata for an image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -s m -l memory -d "Memory limit"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l memory-swap -d "Swap limit equal to memory plus swap: '-1' to enable unlimited swap"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l network -d "Set the networking mode for the RUN instructions during build (default \"default\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l no-cache -d "Do not use cache when building the image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -s o -l output -d "Output destination (format: type=local,dest=path)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l platform -d "Set platform if server is multi-platform capable"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l progress -d "Set type of progress output (auto, plain, tty). Use plain to show container output (default \"auto\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l pull -d "Always attempt to pull a newer version of the image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -s q -l quiet -d "Suppress the build output and print image ID on success"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l rm -d "Remove intermediate containers after a successful build (default true)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l secret -d "Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l security-opt -d "Security options"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l shm-size -d "Size of /dev/shm"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l squash -d "Squash newly built layers into a single new layer"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l ssh -d "SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|<id>[=<socket>|<key>[,<key>]])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l stream -d "Stream attaches to server to negotiate build context"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -s t -l tag -d "Name and optionally a tag in the 'name:tag' format"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l target -d "Set the target build stage to build."
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder build' -l ulimit -d "Ulimit options (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder prune' -s a -l all -d "Remove all unused build cache, not just dangling ones"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder prune' -l filter -d "Provide filter values (e.g. 'until=24h')"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder prune' -s f -l force -d "Do not prompt for confirmation"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker builder prune' -l keep-storage -d "Amount of disk space to keep for cache"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker config' -a create -d "Create a config from a file or STDIN"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker config' -a inspect -d "Display detailed information on one or more configs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker config' -a ls -d "List configs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker config' -a rm -d "Remove one or more configs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker config create' -a "(ls)" -d ""
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker config create' -a "(docker config ls)" -d "Config"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker config create' -s l -l label -d "Config labels"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker config create' -l template-driver -d "Template driver"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker config inspect' -a "(docker config ls)" -d "Config"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker config inspect' -s f -l format -d "Format the output using the given Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker config inspect' -l pretty -d "Print the information in a human friendly format"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker config ls' -s f -l filter -d "Filter output based on conditions provided"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker config ls' -l format -d "Pretty-print configs using a Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker config ls' -s q -l quiet -d "Only display IDs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker config rm' -a "(docker config ls)" -d "Config"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a attach -d "Attach local standard input, output, and error streams to a running container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a commit -d "Create a new image from a container's changes"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a cp -d "Copy files/folders between a container and the local filesystem"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a create -d "Create a new container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a diff -d "Inspect changes to files or directories on a container's filesystem"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a exec -d "Run a command in a running container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a export -d "Export a container's filesystem as a tar archive"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a inspect -d "Display detailed information on one or more containers"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a kill -d "Kill one or more running containers"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a logs -d "Fetch the logs of a container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a ls -d "List containers"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a pause -d "Pause all processes within one or more containers"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a port -d "List port mappings or a specific mapping for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a prune -d "Remove all stopped containers"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a rename -d "Rename a container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a restart -d "Restart one or more containers"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a rm -d "Remove one or more containers"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a run -d "Run a command in a new container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a start -d "Start one or more stopped containers"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a stats -d "Display a live stream of container(s) resource usage statistics"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a stop -d "Stop one or more running containers"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a top -d "Display the running processes of a container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a unpause -d "Unpause all processes within one or more containers"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a update -d "Update configuration of one or more containers"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container' -a wait -d "Block until one or more containers stop, then print their exit codes"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container attach' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container attach' -l detach-keys -d "Override the key sequence for detaching a container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container attach' -l no-stdin -d "Do not attach STDIN"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container attach' -l sig-proxy -d "Proxy all received signals to the process (default true)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container commit' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container commit' -s a -l author -d "Author (e.g., \"John Hannibal Smith <hannibal@a-team.com>\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container commit' -s c -l change -d "Apply Dockerfile instruction to the created image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container commit' -s m -l message -d "Commit message"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container commit' -s p -l pause -d "Pause container during commit (default true)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container cp' -s a -l archive -d "Archive mode (copy all uid/gid information)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container cp' -s L -l follow-link -d "Always follow symbol link in SRC_PATH"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -a "(docker image ls --format='{{.Repository}}:{{.Tag}}')" -d "Image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l add-host -d "Add a custom host-to-IP mapping (host:ip)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -s a -l attach -d "Attach to STDIN, STDOUT or STDERR"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l blkio-weight -d "Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l blkio-weight-device -d "Block IO weight (relative device weight) (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l cap-add -d "Add Linux capabilities"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l cap-drop -d "Drop Linux capabilities"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l cgroup-parent -d "Optional parent cgroup for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l cidfile -d "Write the container ID to the file"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l cpu-period -d "Limit CPU CFS (Completely Fair Scheduler) period"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l cpu-quota -d "Limit CPU CFS (Completely Fair Scheduler) quota"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l cpu-rt-period -d "Limit CPU real-time period in microseconds"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l cpu-rt-runtime -d "Limit CPU real-time runtime in microseconds"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -s c -l cpu-shares -d "CPU shares (relative weight)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l cpus -d "Number of CPUs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l cpuset-cpus -d "CPUs in which to allow execution (0-3, 0,1)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l cpuset-mems -d "MEMs in which to allow execution (0-3, 0,1)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l device -d "Add a host device to the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l device-cgroup-rule -d "Add a rule to the cgroup allowed devices list"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l device-read-bps -d "Limit read rate (bytes per second) from a device (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l device-read-iops -d "Limit read rate (IO per second) from a device (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l device-write-bps -d "Limit write rate (bytes per second) to a device (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l device-write-iops -d "Limit write rate (IO per second) to a device (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l disable-content-trust -d "Skip image verification (default true)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l dns -d "Set custom DNS servers"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l dns-option -d "Set DNS options"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l dns-search -d "Set custom DNS search domains"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l domainname -d "Container NIS domain name"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l entrypoint -d "Overwrite the default ENTRYPOINT of the image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -s e -l env -d "Set environment variables"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l env-file -d "Read in a file of environment variables"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l expose -d "Expose a port or a range of ports"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l gpus -d "GPU devices to add to the container ('all' to pass all GPUs)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l group-add -d "Add additional groups to join"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l health-cmd -d "Command to run to check health"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l health-interval -d "Time between running the check (ms|s|m|h) (default 0s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l health-retries -d "Consecutive failures needed to report unhealthy"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l health-start-period -d "Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l health-timeout -d "Maximum time to allow one check to run (ms|s|m|h) (default 0s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l help -d "Print usage"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -s h -l hostname -d "Container host name"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l init -d "Run an init inside the container that forwards signals and reaps processes"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -s i -l interactive -d "Keep STDIN open even if not attached"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l ip -d "IPv4 address (e.g., 172.30.100.104)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l ip6 -d "IPv6 address (e.g., 2001:db8::33)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l ipc -d "IPC mode to use"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l isolation -d "Container isolation technology"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l kernel-memory -d "Kernel memory limit"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -s l -l label -d "Set meta data on a container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l label-file -d "Read in a line delimited file of labels"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l link -d "Add link to another container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l link-local-ip -d "Container IPv4/IPv6 link-local addresses"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l log-driver -d "Logging driver for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l log-opt -d "Log driver options"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l mac-address -d "Container MAC address (e.g., 92:d0:c6:0a:29:33)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -s m -l memory -d "Memory limit"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l memory-reservation -d "Memory soft limit"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l memory-swap -d "Swap limit equal to memory plus swap: '-1' to enable unlimited swap"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l memory-swappiness -d "Tune container memory swappiness (0 to 100) (default -1)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l mount -d "Attach a filesystem mount to the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l name -d "Assign a name to the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l network -d "Connect a container to a network"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l network-alias -d "Add network-scoped alias for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l no-healthcheck -d "Disable any container-specified HEALTHCHECK"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l oom-kill-disable -d "Disable OOM Killer"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l oom-score-adj -d "Tune host's OOM preferences (-1000 to 1000)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l pid -d "PID namespace to use"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l pids-limit -d "Tune container pids limit (set -1 for unlimited)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l platform -d "Set platform if server is multi-platform capable"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l privileged -d "Give extended privileges to this container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -s p -l publish -d "Publish a container's port(s) to the host"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -s P -l publish-all -d "Publish all exposed ports to random ports"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l read-only -d "Mount the container's root filesystem as read only"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l restart -d "Restart policy to apply when a container exits (default \"no\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l rm -d "Automatically remove the container when it exits"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l runtime -d "Runtime to use for this container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l security-opt -d "Security Options"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l shm-size -d "Size of /dev/shm"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l stop-signal -d "Signal to stop a container (default \"SIGTERM\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l stop-timeout -d "Timeout (in seconds) to stop a container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l storage-opt -d "Storage driver options for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l sysctl -d "Sysctl options (default map[])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l tmpfs -d "Mount a tmpfs directory"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -s t -l tty -d "Allocate a pseudo-TTY"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l ulimit -d "Ulimit options (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -s u -l user -d "Username or UID (format: <name|uid>[:<group|gid>])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l userns -d "User namespace to use"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l uts -d "UTS namespace to use"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -s v -l volume -d "Bind mount a volume"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l volume-driver -d "Optional volume driver for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -l volumes-from -d "Mount volumes from the specified container(s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container create' -s w -l workdir -d "Working directory inside the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container diff' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container exec' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container exec' -s d -l detach -d "Detached mode: run command in the background"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container exec' -l detach-keys -d "Override the key sequence for detaching a container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container exec' -s e -l env -d "Set environment variables"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container exec' -s i -l interactive -d "Keep STDIN open even if not attached"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container exec' -l privileged -d "Give extended privileges to the command"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container exec' -s t -l tty -d "Allocate a pseudo-TTY"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container exec' -s u -l user -d "Username or UID (format: <name|uid>[:<group|gid>])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container exec' -s w -l workdir -d "Working directory inside the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container export' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container export' -s o -l output -d "Write to a file, instead of STDOUT"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container inspect' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container inspect' -s f -l format -d "Format the output using the given Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container inspect' -s s -l size -d "Display total file sizes"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container kill' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container kill' -s s -l signal -d "Signal to send to the container (default \"KILL\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container logs' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container logs' -l details -d "Show extra details provided to logs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container logs' -s f -l follow -d "Follow log output"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container logs' -l since -d "Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container logs' -l tail -d "Number of lines to show from the end of the logs (default \"all\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container logs' -s t -l timestamps -d "Show timestamps"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container logs' -l until -d "Show logs before a timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container ls' -s a -l all -d "Show all containers (default shows just running)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container ls' -s f -l filter -d "Filter output based on conditions provided"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container ls' -l format -d "Pretty-print containers using a Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container ls' -s n -l last -d "Show n last created containers (includes all states) (default -1)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container ls' -s l -l latest -d "Show the latest created container (includes all states)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container ls' -l no-trunc -d "Don't truncate output"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container ls' -s q -l quiet -d "Only display numeric IDs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container ls' -s s -l size -d "Display total file sizes"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container pause' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container port' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container prune' -l filter -d "Provide filter values (e.g. 'until=<timestamp>')"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container prune' -s f -l force -d "Do not prompt for confirmation"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container rename' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container restart' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container restart' -s t -l time -d "Seconds to wait for stop before killing the container (default 10)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container rm' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container rm' -s f -l force -d "Force the removal of a running container (uses SIGKILL)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container rm' -s l -l link -d "Remove the specified link"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container rm' -s v -l volumes -d "Remove anonymous volumes associated with the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -a "(docker image ls --format='{{.Repository}}:{{.Tag}}')" -d "Image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l add-host -d "Add a custom host-to-IP mapping (host:ip)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -s a -l attach -d "Attach to STDIN, STDOUT or STDERR"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l blkio-weight -d "Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l blkio-weight-device -d "Block IO weight (relative device weight) (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l cap-add -d "Add Linux capabilities"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l cap-drop -d "Drop Linux capabilities"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l cgroup-parent -d "Optional parent cgroup for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l cidfile -d "Write the container ID to the file"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l cpu-period -d "Limit CPU CFS (Completely Fair Scheduler) period"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l cpu-quota -d "Limit CPU CFS (Completely Fair Scheduler) quota"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l cpu-rt-period -d "Limit CPU real-time period in microseconds"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l cpu-rt-runtime -d "Limit CPU real-time runtime in microseconds"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -s c -l cpu-shares -d "CPU shares (relative weight)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l cpus -d "Number of CPUs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l cpuset-cpus -d "CPUs in which to allow execution (0-3, 0,1)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l cpuset-mems -d "MEMs in which to allow execution (0-3, 0,1)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -s d -l detach -d "Run container in background and print container ID"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l detach-keys -d "Override the key sequence for detaching a container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l device -d "Add a host device to the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l device-cgroup-rule -d "Add a rule to the cgroup allowed devices list"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l device-read-bps -d "Limit read rate (bytes per second) from a device (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l device-read-iops -d "Limit read rate (IO per second) from a device (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l device-write-bps -d "Limit write rate (bytes per second) to a device (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l device-write-iops -d "Limit write rate (IO per second) to a device (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l disable-content-trust -d "Skip image verification (default true)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l dns -d "Set custom DNS servers"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l dns-option -d "Set DNS options"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l dns-search -d "Set custom DNS search domains"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l domainname -d "Container NIS domain name"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l entrypoint -d "Overwrite the default ENTRYPOINT of the image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -s e -l env -d "Set environment variables"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l env-file -d "Read in a file of environment variables"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l expose -d "Expose a port or a range of ports"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l gpus -d "GPU devices to add to the container ('all' to pass all GPUs)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l group-add -d "Add additional groups to join"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l health-cmd -d "Command to run to check health"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l health-interval -d "Time between running the check (ms|s|m|h) (default 0s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l health-retries -d "Consecutive failures needed to report unhealthy"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l health-start-period -d "Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l health-timeout -d "Maximum time to allow one check to run (ms|s|m|h) (default 0s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l help -d "Print usage"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -s h -l hostname -d "Container host name"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l init -d "Run an init inside the container that forwards signals and reaps processes"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -s i -l interactive -d "Keep STDIN open even if not attached"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l ip -d "IPv4 address (e.g., 172.30.100.104)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l ip6 -d "IPv6 address (e.g., 2001:db8::33)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l ipc -d "IPC mode to use"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l isolation -d "Container isolation technology"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l kernel-memory -d "Kernel memory limit"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -s l -l label -d "Set meta data on a container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l label-file -d "Read in a line delimited file of labels"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l link -d "Add link to another container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l link-local-ip -d "Container IPv4/IPv6 link-local addresses"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l log-driver -d "Logging driver for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l log-opt -d "Log driver options"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l mac-address -d "Container MAC address (e.g., 92:d0:c6:0a:29:33)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -s m -l memory -d "Memory limit"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l memory-reservation -d "Memory soft limit"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l memory-swap -d "Swap limit equal to memory plus swap: '-1' to enable unlimited swap"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l memory-swappiness -d "Tune container memory swappiness (0 to 100) (default -1)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l mount -d "Attach a filesystem mount to the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l name -d "Assign a name to the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l network -d "Connect a container to a network"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l network-alias -d "Add network-scoped alias for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l no-healthcheck -d "Disable any container-specified HEALTHCHECK"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l oom-kill-disable -d "Disable OOM Killer"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l oom-score-adj -d "Tune host's OOM preferences (-1000 to 1000)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l pid -d "PID namespace to use"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l pids-limit -d "Tune container pids limit (set -1 for unlimited)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l platform -d "Set platform if server is multi-platform capable"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l privileged -d "Give extended privileges to this container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -s p -l publish -d "Publish a container's port(s) to the host"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -s P -l publish-all -d "Publish all exposed ports to random ports"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l read-only -d "Mount the container's root filesystem as read only"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l restart -d "Restart policy to apply when a container exits (default \"no\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l rm -d "Automatically remove the container when it exits"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l runtime -d "Runtime to use for this container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l security-opt -d "Security Options"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l shm-size -d "Size of /dev/shm"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l sig-proxy -d "Proxy received signals to the process (default true)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l stop-signal -d "Signal to stop a container (default \"SIGTERM\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l stop-timeout -d "Timeout (in seconds) to stop a container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l storage-opt -d "Storage driver options for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l sysctl -d "Sysctl options (default map[])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l tmpfs -d "Mount a tmpfs directory"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -s t -l tty -d "Allocate a pseudo-TTY"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l ulimit -d "Ulimit options (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -s u -l user -d "Username or UID (format: <name|uid>[:<group|gid>])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l userns -d "User namespace to use"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l uts -d "UTS namespace to use"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -s v -l volume -d "Bind mount a volume"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l volume-driver -d "Optional volume driver for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -l volumes-from -d "Mount volumes from the specified container(s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container run' -s w -l workdir -d "Working directory inside the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container start' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container start' -s a -l attach -d "Attach STDOUT/STDERR and forward signals"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container start' -l checkpoint -d "Restore from this checkpoint"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container start' -l checkpoint-dir -d "Use a custom checkpoint storage directory"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container start' -l detach-keys -d "Override the key sequence for detaching a container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container start' -s i -l interactive -d "Attach container's STDIN"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container stats' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container stats' -s a -l all -d "Show all containers (default shows just running)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container stats' -l format -d "Pretty-print images using a Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container stats' -l no-stream -d "Disable streaming stats and only pull the first result"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container stats' -l no-trunc -d "Do not truncate output"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container stop' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container stop' -s t -l time -d "Seconds to wait for stop before killing it (default 10)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container top' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container unpause' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container update' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container update' -l blkio-weight -d "Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container update' -l cpu-period -d "Limit CPU CFS (Completely Fair Scheduler) period"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container update' -l cpu-quota -d "Limit CPU CFS (Completely Fair Scheduler) quota"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container update' -l cpu-rt-period -d "Limit the CPU real-time period in microseconds"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container update' -l cpu-rt-runtime -d "Limit the CPU real-time runtime in microseconds"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container update' -s c -l cpu-shares -d "CPU shares (relative weight)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container update' -l cpus -d "Number of CPUs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container update' -l cpuset-cpus -d "CPUs in which to allow execution (0-3, 0,1)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container update' -l cpuset-mems -d "MEMs in which to allow execution (0-3, 0,1)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container update' -l kernel-memory -d "Kernel memory limit"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container update' -s m -l memory -d "Memory limit"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container update' -l memory-reservation -d "Memory soft limit"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container update' -l memory-swap -d "Swap limit equal to memory plus swap: '-1' to enable unlimited swap"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container update' -l pids-limit -d "Tune container pids limit (set -1 for unlimited)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container update' -l restart -d "Restart policy to apply when a container exits"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker container wait' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker context' -a create -d "Create new context"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker context' -a inspect -d "Display detailed information on one or more contexts"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker context' -a list -d "List available contexts"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker context' -a rm -d "Remove one or more contexts"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker context' -a show -d "Print the current context"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker context' -a use -d "Set the default context"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker context create' -a aci -d "Create a context for Azure Container Instances"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker context create' -a ecs -d "Create a context for Amazon ECS"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image' -a build -d "Build an image from a Dockerfile"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image' -a history -d "Show the history of an image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image' -a import -d "Import the contents from a tarball to create a filesystem image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image' -a inspect -d "Display detailed information on one or more images"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image' -a load -d "Load an image from a tar archive or STDIN"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image' -a ls -d "List images"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image' -a prune -d "Remove unused images"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image' -a pull -d "Pull an image or a repository from a registry"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image' -a push -d "Push an image or a repository to a registry"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image' -a rm -d "Remove one or more images"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image' -a save -d "Save one or more images to a tar archive (streamed to STDOUT by default)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image' -a tag -d "Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l add-host -d "Add a custom host-to-IP mapping (host:ip)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l build-arg -d "Set build-time variables"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l cache-from -d "Images to consider as cache sources"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l cgroup-parent -d "Optional parent cgroup for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l compress -d "Compress the build context using gzip"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l cpu-period -d "Limit the CPU CFS (Completely Fair Scheduler) period"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l cpu-quota -d "Limit the CPU CFS (Completely Fair Scheduler) quota"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -s c -l cpu-shares -d "CPU shares (relative weight)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l cpuset-cpus -d "CPUs in which to allow execution (0-3, 0,1)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l cpuset-mems -d "MEMs in which to allow execution (0-3, 0,1)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l disable-content-trust -d "Skip image verification (default true)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -s f -l file -d "Name of the Dockerfile (Default is 'PATH/Dockerfile')"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l force-rm -d "Always remove intermediate containers"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l iidfile -d "Write the image ID to the file"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l isolation -d "Container isolation technology"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l label -d "Set metadata for an image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -s m -l memory -d "Memory limit"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l memory-swap -d "Swap limit equal to memory plus swap: '-1' to enable unlimited swap"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l network -d "Set the networking mode for the RUN instructions during build (default \"default\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l no-cache -d "Do not use cache when building the image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -s o -l output -d "Output destination (format: type=local,dest=path)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l platform -d "Set platform if server is multi-platform capable"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l progress -d "Set type of progress output (auto, plain, tty). Use plain to show container output (default \"auto\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l pull -d "Always attempt to pull a newer version of the image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -s q -l quiet -d "Suppress the build output and print image ID on success"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l rm -d "Remove intermediate containers after a successful build (default true)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l secret -d "Secret file to expose to the build (only if BuildKit enabled): id=mysecret,src=/local/secret"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l security-opt -d "Security options"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l shm-size -d "Size of /dev/shm"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l squash -d "Squash newly built layers into a single new layer"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l ssh -d "SSH agent socket or keys to expose to the build (only if BuildKit enabled) (format: default|<id>[=<socket>|<key>[,<key>]])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l stream -d "Stream attaches to server to negotiate build context"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -s t -l tag -d "Name and optionally a tag in the 'name:tag' format"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l target -d "Set the target build stage to build."
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image build' -l ulimit -d "Ulimit options (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image history' -a "(docker image ls --format='{{.Repository}}:{{.Tag}}')" -d "Image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image history' -l format -d "Pretty-print images using a Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image history' -s H -l human -d "Print sizes and dates in human readable format (default true)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image history' -l no-trunc -d "Don't truncate output"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image history' -s q -l quiet -d "Only show numeric IDs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image import' -a "(ls)" -d ""
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image import' -s c -l change -d "Apply Dockerfile instruction to the created image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image import' -s m -l message -d "Set commit message for imported image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image import' -l platform -d "Set platform if server is multi-platform capable"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image inspect' -a "(docker image ls --format='{{.Repository}}:{{.Tag}}')" -d "Image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image inspect' -s f -l format -d "Format the output using the given Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image load' -s i -l input -d "Read from tar archive file, instead of STDIN"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image load' -s q -l quiet -d "Suppress the load output"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image ls' -s a -l all -d "Show all images (default hides intermediate images)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image ls' -l digests -d "Show digests"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image ls' -s f -l filter -d "Filter output based on conditions provided"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image ls' -l format -d "Pretty-print images using a Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image ls' -l no-trunc -d "Don't truncate output"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image ls' -s q -l quiet -d "Only show numeric IDs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image prune' -s a -l all -d "Remove all unused images, not just dangling ones"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image prune' -l filter -d "Provide filter values (e.g. 'until=<timestamp>')"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image prune' -s f -l force -d "Do not prompt for confirmation"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image pull' -s a -l all-tags -d "Download all tagged images in the repository"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image pull' -l disable-content-trust -d "Skip image verification (default true)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image pull' -l platform -d "Set platform if server is multi-platform capable"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image pull' -s q -l quiet -d "Suppress verbose output"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image push' -l disable-content-trust -d "Skip image signing (default true)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image rm' -a "(docker image ls --format='{{.Repository}}:{{.Tag}}')" -d "Image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image rm' -s f -l force -d "Force removal of the image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image rm' -l no-prune -d "Do not delete untagged parents"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image save' -a "(docker image ls --format='{{.Repository}}:{{.Tag}}')" -d "Image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image save' -s o -l output -d "Write to a file, instead of STDOUT"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker image tag' -a "(docker image ls --format='{{.Repository}}:{{.Tag}}')" -d "Image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network' -a connect -d "Connect a container to a network"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network' -a create -d "Create a network"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network' -a disconnect -d "Disconnect a container from a network"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network' -a inspect -d "Display detailed information on one or more networks"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network' -a ls -d "List networks"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network' -a prune -d "Remove all unused networks"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network' -a rm -d "Remove one or more networks"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network connect' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network connect' -a "(docker network ls --format='{{.Name}}')" -d "Network"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network connect' -l alias -d "Add network-scoped alias for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network connect' -l driver-opt -d "driver options for the network"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network connect' -l ip -d "IPv4 address (e.g., 172.30.100.104)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network connect' -l ip6 -d "IPv6 address (e.g., 2001:db8::33)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network connect' -l link -d "Add link to another container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network connect' -l link-local-ip -d "Add a link-local address for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network create' -a "(docker network ls --format='{{.Name}}')" -d "Network"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network create' -l attachable -d "Enable manual container attachment"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network create' -l aux-address -d "Auxiliary IPv4 or IPv6 addresses used by Network driver (default map[])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network create' -l config-from -d "The network from which copying the configuration"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network create' -l config-only -d "Create a configuration only network"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network create' -s d -l driver -d "Driver to manage the Network (default \"bridge\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network create' -l gateway -d "IPv4 or IPv6 Gateway for the master subnet"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network create' -l ingress -d "Create swarm routing-mesh network"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network create' -l internal -d "Restrict external access to the network"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network create' -l ip-range -d "Allocate container ip from a sub-range"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network create' -l ipam-driver -d "IP Address Management Driver (default \"default\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network create' -l ipam-opt -d "Set IPAM driver specific options (default map[])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network create' -l ipv6 -d "Enable IPv6 networking"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network create' -l label -d "Set metadata on a network"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network create' -s o -l opt -d "Set driver specific options (default map[])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network create' -l scope -d "Control the network's scope"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network create' -l subnet -d "Subnet in CIDR format that represents a network segment"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network disconnect' -a "(docker container ls --all --format='{{.Names}}')" -d "Container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network disconnect' -a "(docker network ls --format='{{.Name}}')" -d "Network"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network disconnect' -s f -l force -d "Force the container to disconnect from a network"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network inspect' -a "(docker network ls --format='{{.Name}}')" -d "Network"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network inspect' -s f -l format -d "Format the output using the given Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network inspect' -s v -l verbose -d "Verbose output for diagnostics"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network ls' -s f -l filter -d "Provide filter values (e.g. 'driver=bridge')"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network ls' -l format -d "Pretty-print networks using a Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network ls' -l no-trunc -d "Do not truncate the output"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network ls' -s q -l quiet -d "Only display network IDs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network prune' -l filter -d "Provide filter values (e.g. 'until=<timestamp>')"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network prune' -s f -l force -d "Do not prompt for confirmation"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker network rm' -a "(docker network ls --format='{{.Name}}')" -d "Network"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node' -a demote -d "Demote one or more nodes from manager in the swarm"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node' -a inspect -d "Display detailed information on one or more nodes"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node' -a ls -d "List nodes in the swarm"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node' -a promote -d "Promote one or more nodes to manager in the swarm"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node' -a ps -d "List tasks running on one or more nodes, defaults to current node"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node' -a rm -d "Remove one or more nodes from the swarm"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node' -a update -d "Update a node"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node demote' -a "(docker node ls --format='{{.Name}}')" -d "Node"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node inspect' -a "(docker node ls --format='{{.Name}}')" -d "Node"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node inspect' -s f -l format -d "Format the output using the given Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node inspect' -l pretty -d "Print the information in a human friendly format"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node ls' -s f -l filter -d "Filter output based on conditions provided"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node ls' -l format -d "Pretty-print nodes using a Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node ls' -s q -l quiet -d "Only display IDs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node promote' -a "(docker node ls --format='{{.Name}}')" -d "Node"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node ps' -a "(docker node ls --format='{{.Name}}')" -d "Node"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node ps' -s f -l filter -d "Filter output based on conditions provided"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node ps' -l format -d "Pretty-print tasks using a Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node ps' -l no-resolve -d "Do not map IDs to Names"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node ps' -l no-trunc -d "Do not truncate output"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node ps' -s q -l quiet -d "Only display task IDs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node rm' -a "(docker node ls --format='{{.Name}}')" -d "Node"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node rm' -s f -l force -d "Force remove a node from the swarm"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node update' -a "(docker node ls --format='{{.Name}}')" -d "Node"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node update' -l availability -d "Availability of the node (\"active\"|\"pause\"|\"drain\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node update' -l label-add -d "Add or update a node label (key=value)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node update' -l label-rm -d "Remove a node label if exists"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker node update' -l role -d "Role of the node (\"worker\"|\"manager\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin' -a create -d "Create a plugin from a rootfs and configuration. Plugin data directory must contain config.json and rootfs directory."
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin' -a disable -d "Disable a plugin"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin' -a enable -d "Enable a plugin"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin' -a inspect -d "Display detailed information on one or more plugins"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin' -a install -d "Install a plugin"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin' -a ls -d "List plugins"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin' -a push -d "Push a plugin to a registry"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin' -a rm -d "Remove one or more plugins"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin' -a set -d "Change settings for a plugin"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin' -a upgrade -d "Upgrade an existing plugin"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin create' -a "(docker plugin ls --format='{{.Name}}')" -d "Plugin"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin create' -l compress -d "Compress the context using gzip"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin disable' -a "(docker plugin ls --format='{{.Name}}')" -d "Plugin"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin disable' -s f -l force -d "Force the disable of an active plugin"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin enable' -a "(docker plugin ls --format='{{.Name}}')" -d "Plugin"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin enable' -l timeout -d "HTTP client timeout (in seconds) (default 30)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin inspect' -a "(docker plugin ls --format='{{.Name}}')" -d "Plugin"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin inspect' -s f -l format -d "Format the output using the given Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin install' -a "(docker plugin ls --format='{{.Name}}')" -d "Plugin"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin install' -l alias -d "Local name for plugin"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin install' -l disable -d "Do not enable the plugin on install"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin install' -l disable-content-trust -d "Skip image verification (default true)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin install' -l grant-all-permissions -d "Grant all permissions necessary to run the plugin"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin ls' -s f -l filter -d "Provide filter values (e.g. 'enabled=true')"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin ls' -l format -d "Pretty-print plugins using a Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin ls' -l no-trunc -d "Don't truncate output"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin ls' -s q -l quiet -d "Only display plugin IDs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin push' -a "(docker plugin ls --format='{{.Name}}')" -d "Plugin"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin push' -l disable-content-trust -d "Skip image signing (default true)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin rm' -a "(docker plugin ls --format='{{.Name}}')" -d "Plugin"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin rm' -s f -l force -d "Force the removal of an active plugin"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin set' -a "(docker plugin ls --format='{{.Name}}')" -d "Plugin"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin upgrade' -a "(docker plugin ls --format='{{.Name}}')" -d "Plugin"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin upgrade' -l disable-content-trust -d "Skip image verification (default true)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin upgrade' -l grant-all-permissions -d "Grant all permissions necessary to run the plugin"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker plugin upgrade' -l skip-remote-check -d "Do not check if specified remote plugin matches existing plugin image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker secret' -a create -d "Create a secret from a file or STDIN as content"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker secret' -a inspect -d "Display detailed information on one or more secrets"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker secret' -a ls -d "List secrets"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker secret' -a rm -d "Remove one or more secrets"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker secret create' -a "(docker secret ls --format='{{.Name}}')" -d "Secret"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker secret create' -a "(ls)" -d ""
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker secret create' -s d -l driver -d "Secret driver"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker secret create' -s l -l label -d "Secret labels"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker secret create' -l template-driver -d "Template driver"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker secret inspect' -a "(docker secret ls --format='{{.Name}}')" -d "Secret"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker secret inspect' -s f -l format -d "Format the output using the given Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker secret inspect' -l pretty -d "Print the information in a human friendly format"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker secret ls' -s f -l filter -d "Filter output based on conditions provided"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker secret ls' -l format -d "Pretty-print secrets using a Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker secret ls' -s q -l quiet -d "Only display IDs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker secret rm' -a "(docker secret ls --format='{{.Name}}')" -d "Secret"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service' -a create -d "Create a new service"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service' -a inspect -d "Display detailed information on one or more services"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service' -a logs -d "Fetch the logs of a service or task"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service' -a ls -d "List services"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service' -a ps -d "List the tasks of one or more services"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service' -a rm -d "Remove one or more services"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service' -a rollback -d "Revert changes to a service's configuration"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service' -a scale -d "Scale one or multiple replicated services"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service' -a update -d "Update a service"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -a "(docker image ls --format='{{.Repository}}:{{.Tag}}')" -d "Image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l config -d "Specify configurations to expose to the service"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l constraint -d "Placement constraints"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l container-label -d "Container labels"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l credential-spec -d "Credential spec for managed service account (Windows only)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -s d -l detach -d "Exit immediately instead of waiting for the service to converge"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l dns -d "Set custom DNS servers"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l dns-option -d "Set DNS options"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l dns-search -d "Set custom DNS search domains"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l endpoint-mode -d "Endpoint mode (vip or dnsrr) (default \"vip\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l entrypoint -d "Overwrite the default ENTRYPOINT of the image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -s e -l env -d "Set environment variables"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l env-file -d "Read in a file of environment variables"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l generic-resource -d "User defined resources"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l group -d "Set one or more supplementary user groups for the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l health-cmd -d "Command to run to check health"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l health-interval -d "Time between running the check (ms|s|m|h)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l health-retries -d "Consecutive failures needed to report unhealthy"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l health-start-period -d "Start period for the container to initialize before counting retries towards unstable (ms|s|m|h)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l health-timeout -d "Maximum time to allow one check to run (ms|s|m|h)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l host -d "Set one or more custom host-to-IP mappings (host:ip)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l hostname -d "Container hostname"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l init -d "Use an init inside each service container to forward signals and reap processes"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l isolation -d "Service container isolation mode"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -s l -l label -d "Service labels"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l limit-cpu -d "Limit CPUs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l limit-memory -d "Limit Memory"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l log-driver -d "Logging driver for service"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l log-opt -d "Logging driver options"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l mode -d "Service mode (replicated or global) (default \"replicated\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l mount -d "Attach a filesystem mount to the service"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l name -d "Service name"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l network -d "Network attachments"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l no-healthcheck -d "Disable any container-specified HEALTHCHECK"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l no-resolve-image -d "Do not query the registry to resolve image digest and supported platforms"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l placement-pref -d "Add a placement preference"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -s p -l publish -d "Publish a port as a node port"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -s q -l quiet -d "Suppress progress output"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l read-only -d "Mount the container's root filesystem as read only"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l replicas -d "Number of tasks"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l replicas-max-per-node -d "Maximum number of tasks per node (default 0 = unlimited)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l reserve-cpu -d "Reserve CPUs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l reserve-memory -d "Reserve Memory"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l restart-condition -d "Restart when condition is met (\"none\"|\"on-failure\"|\"any\") (default \"any\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l restart-delay -d "Delay between restart attempts (ns|us|ms|s|m|h) (default 5s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l restart-max-attempts -d "Maximum number of restarts before giving up"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l restart-window -d "Window used to evaluate the restart policy (ns|us|ms|s|m|h)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l rollback-delay -d "Delay between task rollbacks (ns|us|ms|s|m|h) (default 0s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l rollback-failure-action -d "Action on rollback failure (\"pause\"|\"continue\") (default \"pause\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l rollback-max-failure-ratio -d "Failure rate to tolerate during a rollback (default 0)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l rollback-monitor -d "Duration after each task rollback to monitor for failure (ns|us|ms|s|m|h) (default 5s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l rollback-order -d "Rollback order (\"start-first\"|\"stop-first\") (default \"stop-first\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l rollback-parallelism -d "Maximum number of tasks rolled back simultaneously (0 to roll back all at once) (default 1)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l secret -d "Specify secrets to expose to the service"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l stop-grace-period -d "Time to wait before force killing a container (ns|us|ms|s|m|h) (default 10s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l stop-signal -d "Signal to stop the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l sysctl -d "Sysctl options"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -s t -l tty -d "Allocate a pseudo-TTY"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l update-delay -d "Delay between updates (ns|us|ms|s|m|h) (default 0s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l update-failure-action -d "Action on update failure (\"pause\"|\"continue\"|\"rollback\") (default \"pause\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l update-max-failure-ratio -d "Failure rate to tolerate during an update (default 0)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l update-monitor -d "Duration after each task update to monitor for failure (ns|us|ms|s|m|h) (default 5s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l update-order -d "Update order (\"start-first\"|\"stop-first\") (default \"stop-first\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l update-parallelism -d "Maximum number of tasks updated simultaneously (0 to update all at once) (default 1)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -s u -l user -d "Username or UID (format: <name|uid>[:<group|gid>])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -l with-registry-auth -d "Send registry authentication details to swarm agents"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service create' -s w -l workdir -d "Working directory inside the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service inspect' -a "(docker service ls --format='{{.Name}}')" -d "Service"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service inspect' -s f -l format -d "Format the output using the given Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service inspect' -l pretty -d "Print the information in a human friendly format"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service logs' -a "(docker service ls --format='{{.Name}}')" -d "Service"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service logs' -l details -d "Show extra details provided to logs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service logs' -s f -l follow -d "Follow log output"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service logs' -l no-resolve -d "Do not map IDs to Names in output"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service logs' -l no-task-ids -d "Do not include task IDs in output"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service logs' -l no-trunc -d "Do not truncate output"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service logs' -l raw -d "Do not neatly format logs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service logs' -l since -d "Show logs since timestamp (e.g. 2013-01-02T13:23:37) or relative (e.g. 42m for 42 minutes)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service logs' -l tail -d "Number of lines to show from the end of the logs (default \"all\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service logs' -s t -l timestamps -d "Show timestamps"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service ls' -s f -l filter -d "Filter output based on conditions provided"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service ls' -l format -d "Pretty-print services using a Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service ls' -s q -l quiet -d "Only display IDs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service ps' -a "(docker service ls --format='{{.Name}}')" -d "Service"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service ps' -s f -l filter -d "Filter output based on conditions provided"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service ps' -l format -d "Pretty-print tasks using a Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service ps' -l no-resolve -d "Do not map IDs to Names"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service ps' -l no-trunc -d "Do not truncate output"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service ps' -s q -l quiet -d "Only display task IDs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service rm' -a "(docker service ls --format='{{.Name}}')" -d "Service"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service rollback' -a "(docker service ls --format='{{.Name}}')" -d "Service"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service rollback' -s d -l detach -d "Exit immediately instead of waiting for the service to converge"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service rollback' -s q -l quiet -d "Suppress progress output"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service scale' -a "(docker service ls --format='{{.Name}}')" -d "Service"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service scale' -s d -l detach -d "Exit immediately instead of waiting for the service to converge"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -a "(docker service ls --format='{{.Name}}')" -d "Service"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l args -d "Service command args"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l config-add -d "Add or update a config file on a service"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l config-rm -d "Remove a configuration file"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l constraint-add -d "Add or update a placement constraint"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l constraint-rm -d "Remove a constraint"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l container-label-add -d "Add or update a container label"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l container-label-rm -d "Remove a container label by its key"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l credential-spec -d "Credential spec for managed service account (Windows only)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -s d -l detach -d "Exit immediately instead of waiting for the service to converge"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l dns-add -d "Add or update a custom DNS server"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l dns-option-add -d "Add or update a DNS option"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l dns-option-rm -d "Remove a DNS option"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l dns-rm -d "Remove a custom DNS server"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l dns-search-add -d "Add or update a custom DNS search domain"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l dns-search-rm -d "Remove a DNS search domain"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l endpoint-mode -d "Endpoint mode (vip or dnsrr)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l entrypoint -d "Overwrite the default ENTRYPOINT of the image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l env-add -d "Add or update an environment variable"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l env-rm -d "Remove an environment variable"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l force -d "Force update even if no changes require it"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l generic-resource-add -d "Add a Generic resource"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l generic-resource-rm -d "Remove a Generic resource"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l group-add -d "Add an additional supplementary user group to the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l group-rm -d "Remove a previously added supplementary user group from the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l health-cmd -d "Command to run to check health"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l health-interval -d "Time between running the check (ms|s|m|h)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l health-retries -d "Consecutive failures needed to report unhealthy"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l health-start-period -d "Start period for the container to initialize before counting retries towards unstable (ms|s|m|h)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l health-timeout -d "Maximum time to allow one check to run (ms|s|m|h)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l host-add -d "Add a custom host-to-IP mapping (host:ip)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l host-rm -d "Remove a custom host-to-IP mapping (host:ip)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l hostname -d "Container hostname"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l image -d "Service image tag"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l init -d "Use an init inside each service container to forward signals and reap processes"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l isolation -d "Service container isolation mode"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l label-add -d "Add or update a service label"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l label-rm -d "Remove a label by its key"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l limit-cpu -d "Limit CPUs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l limit-memory -d "Limit Memory"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l log-driver -d "Logging driver for service"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l log-opt -d "Logging driver options"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l mount-add -d "Add or update a mount on a service"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l mount-rm -d "Remove a mount by its target path"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l network-add -d "Add a network"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l network-rm -d "Remove a network"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l no-healthcheck -d "Disable any container-specified HEALTHCHECK"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l no-resolve-image -d "Do not query the registry to resolve image digest and supported platforms"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l placement-pref-add -d "Add a placement preference"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l placement-pref-rm -d "Remove a placement preference"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l publish-add -d "Add or update a published port"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l publish-rm -d "Remove a published port by its target port"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -s q -l quiet -d "Suppress progress output"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l read-only -d "Mount the container's root filesystem as read only"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l replicas -d "Number of tasks"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l replicas-max-per-node -d "Maximum number of tasks per node (default 0 = unlimited)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l reserve-cpu -d "Reserve CPUs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l reserve-memory -d "Reserve Memory"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l restart-condition -d "Restart when condition is met (\"none\"|\"on-failure\"|\"any\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l restart-delay -d "Delay between restart attempts (ns|us|ms|s|m|h)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l restart-max-attempts -d "Maximum number of restarts before giving up"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l restart-window -d "Window used to evaluate the restart policy (ns|us|ms|s|m|h)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l rollback -d "Rollback to previous specification"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l rollback-delay -d "Delay between task rollbacks (ns|us|ms|s|m|h)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l rollback-failure-action -d "Action on rollback failure (\"pause\"|\"continue\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l rollback-max-failure-ratio -d "Failure rate to tolerate during a rollback"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l rollback-monitor -d "Duration after each task rollback to monitor for failure (ns|us|ms|s|m|h)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l rollback-order -d "Rollback order (\"start-first\"|\"stop-first\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l rollback-parallelism -d "Maximum number of tasks rolled back simultaneously (0 to roll back all at once)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l secret-add -d "Add or update a secret on a service"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l secret-rm -d "Remove a secret"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l stop-grace-period -d "Time to wait before force killing a container (ns|us|ms|s|m|h)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l stop-signal -d "Signal to stop the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l sysctl-add -d "Add or update a Sysctl option"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l sysctl-rm -d "Remove a Sysctl option"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -s t -l tty -d "Allocate a pseudo-TTY"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l update-delay -d "Delay between updates (ns|us|ms|s|m|h)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l update-failure-action -d "Action on update failure (\"pause\"|\"continue\"|\"rollback\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l update-max-failure-ratio -d "Failure rate to tolerate during an update"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l update-monitor -d "Duration after each task update to monitor for failure (ns|us|ms|s|m|h)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l update-order -d "Update order (\"start-first\"|\"stop-first\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l update-parallelism -d "Maximum number of tasks updated simultaneously (0 to update all at once)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -s u -l user -d "Username or UID (format: <name|uid>[:<group|gid>])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -l with-registry-auth -d "Send registry authentication details to swarm agents"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker service update' -s w -l workdir -d "Working directory inside the container"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack' -a deploy -d "Deploy a new stack or update an existing stack"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack' -a ls -d "List stacks"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack' -a ps -d "List the tasks in the stack"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack' -a rm -d "Remove one or more stacks"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack' -a services -d "List the services in the stack"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack' -l orchestrator -d "Orchestrator to use (swarm|kubernetes|all)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack deploy' -a "(docker stack ls --format='{{.Name}}')" -d "Stack"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack deploy' -l bundle-file -d "Path to a Distributed Application Bundle file"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack deploy' -s c -l compose-file -d "Path to a Compose file, or \"-\" to read from stdin"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack deploy' -l orchestrator -d "Orchestrator to use (swarm|kubernetes|all)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack deploy' -l prune -d "Prune services that are no longer referenced"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack deploy' -l resolve-image -d "Query the registry to resolve image digest and supported platforms (\"always\"|\"changed\"|\"never\") (default \"always\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack deploy' -l with-registry-auth -d "Send registry authentication details to Swarm agents"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack ls' -l format -d "Pretty-print stacks using a Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack ls' -l orchestrator -d "Orchestrator to use (swarm|kubernetes|all)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack ps' -a "(docker stack ls --format='{{.Name}}')" -d "Stack"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack ps' -s f -l filter -d "Filter output based on conditions provided"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack ps' -l format -d "Pretty-print tasks using a Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack ps' -l no-resolve -d "Do not map IDs to Names"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack ps' -l no-trunc -d "Do not truncate output"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack ps' -l orchestrator -d "Orchestrator to use (swarm|kubernetes|all)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack ps' -s q -l quiet -d "Only display task IDs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack rm' -a "(docker stack ls --format='{{.Name}}')" -d "Stack"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack rm' -l orchestrator -d "Orchestrator to use (swarm|kubernetes|all)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack services' -a "(docker stack ls --format='{{.Name}}')" -d "Stack"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack services' -s f -l filter -d "Filter output based on conditions provided"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack services' -l format -d "Pretty-print services using a Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack services' -l orchestrator -d "Orchestrator to use (swarm|kubernetes|all)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker stack services' -s q -l quiet -d "Only display IDs"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm' -a ca -d "Display and rotate the root CA"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm' -a init -d "Initialize a swarm"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm' -a join -d "Join a swarm as a node and/or manager"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm' -a join-token -d "Manage join tokens"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm' -a leave -d "Leave the swarm"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm' -a unlock -d "Unlock swarm"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm' -a unlock-key -d "Manage the unlock key"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm' -a update -d "Update the swarm"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm ca' -l ca-cert -d "Path to the PEM-formatted root CA certificate to use for the new cluster"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm ca' -l ca-key -d "Path to the PEM-formatted root CA key to use for the new cluster"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm ca' -l cert-expiry -d "Validity period for node certificates (ns|us|ms|s|m|h) (default 2160h0m0s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm ca' -s d -l detach -d "Exit immediately instead of waiting for the root rotation to converge"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm ca' -l external-ca -d "Specifications of one or more certificate signing endpoints"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm ca' -s q -l quiet -d "Suppress progress output"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm ca' -l rotate -d "Rotate the swarm CA - if no certificate or key are provided, new ones will be generated"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm init' -l advertise-addr -d "Advertised address (format: <ip|interface>[:port])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm init' -l autolock -d "Enable manager autolocking (requiring an unlock key to start a stopped manager)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm init' -l availability -d "Availability of the node (\"active\"|\"pause\"|\"drain\") (default \"active\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm init' -l cert-expiry -d "Validity period for node certificates (ns|us|ms|s|m|h) (default 2160h0m0s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm init' -l data-path-addr -d "Address or interface to use for data path traffic (format: <ip|interface>)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm init' -l data-path-port -d "Port number to use for data path traffic (1024 - 49151). If no value is set or is set to 0, the default port (4789) is used."
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm init' -l default-addr-pool -d "default address pool in CIDR format (default [])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm init' -l default-addr-pool-mask-length -d "default address pool subnet mask length (default 24)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm init' -l dispatcher-heartbeat -d "Dispatcher heartbeat period (ns|us|ms|s|m|h) (default 5s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm init' -l external-ca -d "Specifications of one or more certificate signing endpoints"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm init' -l force-new-cluster -d "Force create a new cluster from current state"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm init' -l listen-addr -d "Listen address (format: <ip|interface>[:port]) (default 0.0.0.0:2377)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm init' -l max-snapshots -d "Number of additional Raft snapshots to retain"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm init' -l snapshot-interval -d "Number of log entries between Raft snapshots (default 10000)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm init' -l task-history-limit -d "Task history retention limit (default 5)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm join' -l advertise-addr -d "Advertised address (format: <ip|interface>[:port])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm join' -l availability -d "Availability of the node (\"active\"|\"pause\"|\"drain\") (default \"active\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm join' -l data-path-addr -d "Address or interface to use for data path traffic (format: <ip|interface>)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm join' -l listen-addr -d "Listen address (format: <ip|interface>[:port]) (default 0.0.0.0:2377)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm join' -l token -d "Token for entry into the swarm"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm join-token' -s q -l quiet -d "Only display token"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm join-token' -l rotate -d "Rotate join token"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm leave' -s f -l force -d "Force this node to leave the swarm, ignoring warnings"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm unlock-key' -s q -l quiet -d "Only display token"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm unlock-key' -l rotate -d "Rotate unlock key"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm update' -l autolock -d "Change manager autolocking setting (true|false)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm update' -l cert-expiry -d "Validity period for node certificates (ns|us|ms|s|m|h) (default 2160h0m0s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm update' -l dispatcher-heartbeat -d "Dispatcher heartbeat period (ns|us|ms|s|m|h) (default 5s)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm update' -l external-ca -d "Specifications of one or more certificate signing endpoints"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm update' -l max-snapshots -d "Number of additional Raft snapshots to retain"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm update' -l snapshot-interval -d "Number of log entries between Raft snapshots (default 10000)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker swarm update' -l task-history-limit -d "Task history retention limit (default 5)"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker system' -a df -d "Show docker disk usage"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker system' -a events -d "Get real time events from the server"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker system' -a info -d "Display system-wide information"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker system' -a prune -d "Remove unused data"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker system df' -l format -d "Pretty-print images using a Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker system df' -s v -l verbose -d "Show detailed information on space usage"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker system events' -s f -l filter -d "Filter output based on conditions provided"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker system events' -l format -d "Format the output using the given Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker system events' -l since -d "Show all events created since timestamp"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker system events' -l until -d "Stream events until this timestamp"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker system info' -s f -l format -d "Format the output using the given Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker system prune' -s a -l all -d "Remove all unused images not just dangling ones"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker system prune' -l filter -d "Provide filter values (e.g. 'label=<key>=<value>')"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker system prune' -s f -l force -d "Do not prompt for confirmation"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker system prune' -l volumes -d "Prune volumes"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker trust' -a key -d "Manage keys for signing Docker images"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker trust' -a signer -d "Manage entities who can sign Docker images"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker trust' -a inspect -d "Return low-level information about keys and signatures"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker trust' -a revoke -d "Remove trust for an image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker trust' -a sign -d "Sign an image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker trust key' -a generate -d "Generate and load a signing key-pair"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker trust key' -a load -d "Load a private key file for signing"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker trust key generate' -l dir -d "Directory to generate key in, defaults to current directory"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker trust key load' -l name -d "Name for the loaded key (default \"signer\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker trust signer' -a add -d "Add a signer"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker trust signer' -a remove -d "Remove a signer"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker trust signer add' -l key -d "Path to the signer's public key file"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker trust signer remove' -s f -l force -d "Do not prompt for confirmation before removing the most recent signer"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker trust inspect' -a "(docker image ls --format='{{.Repository}}:{{.Tag}}')" -d "Image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker trust inspect' -l pretty -d "Print the information in a human friendly format"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker trust revoke' -a "(docker image ls --format='{{.Repository}}:{{.Tag}}')" -d "Image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker trust revoke' -s y -l yes -d "Do not prompt for confirmation"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker trust sign' -a "(docker image ls --format='{{.Repository}}:{{.Tag}}')" -d "Image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker trust sign' -l local -d "Sign a locally tagged image"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker volume' -a create -d "Create a volume"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker volume' -a inspect -d "Display detailed information on one or more volumes"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker volume' -a ls -d "List volumes"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker volume' -a prune -d "Remove all unused local volumes"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker volume' -a rm -d "Remove one or more volumes"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker volume create' -a "(docker volume ls --format='{{.Name}}')" -d "Volume"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker volume create' -s d -l driver -d "Specify volume driver name (default \"local\")"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker volume create' -l label -d "Set metadata for a volume"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker volume create' -s o -l opt -d "Set driver specific options (default map[])"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker volume inspect' -a "(docker volume ls --format='{{.Name}}')" -d "Volume"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker volume inspect' -s f -l format -d "Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker volume ls' -s f -l filter -d "Provide filter values (e.g. 'dangling=true')"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker volume ls' -l format -d "Pretty-print volumes using a Go template"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker volume ls' -s q -l quiet -d "Only display volume names"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker volume prune' -l filter -d "Provide filter values (e.g. 'label=<label>')"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker volume prune' -s f -l force -d "Do not prompt for confirmation"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker volume rm' -a "(docker volume ls --format='{{.Name}}')" -d "Volume"
complete -c docker -n '__fish_docker_command_chain_exactly_matches docker volume rm' -s f -l force -d "Force the removal of one or more volumes"
